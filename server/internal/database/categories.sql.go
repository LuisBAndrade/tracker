// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (user_id, name, color, created_at)
VALUES ($1, $2, $3, NOW())
RETURNING id, user_id, name, color, created_at
`

type CreateCategoryParams struct {
	UserID uuid.UUID
	Name   string
	Color  string
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.UserID, arg.Name, arg.Color)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories 
WHERE id = $1 AND user_id = $2
`

type DeleteCategoryParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, arg.ID, arg.UserID)
	return err
}

const getCategoriesByUser = `-- name: GetCategoriesByUser :many
SELECT id, user_id, name, color, created_at FROM categories 
WHERE user_id = $1
ORDER BY name
`

func (q *Queries) GetCategoriesByUser(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Color,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, user_id, name, color, created_at FROM categories 
WHERE id = $1 AND user_id = $2
`

type GetCategoryByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetCategoryByID(ctx context.Context, arg GetCategoryByIDParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, arg.ID, arg.UserID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2, color = $3
WHERE id = $1 AND user_id = $4
RETURNING id, user_id, name, color, created_at
`

type UpdateCategoryParams struct {
	ID     uuid.UUID
	Name   string
	Color  string
	UserID uuid.UUID
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.UserID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}
